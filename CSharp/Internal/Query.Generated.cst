<%@ Template Language="C#" TargetLanguage="C#" Debug="True" Encoding="UTF-8" %>

<%@ Assembly Src="Model.cs" %>
<%@ Assembly Src="Extensions.cs" %>

<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="System.Linq" %>
<%@ Import Namespace="System.Text" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>

<%@ Import Namespace="SchemaMapper" %>

<%@ Property Name="Entity"
             Type="SchemaMapper.Entity"  %>

<%@ Property Name="EntityNamespace"
             Type="System.String"  %>

<%@ Property Name="QueryNamespace"
             Type="System.String"  %>

<%@ Property Name="MethodPrefix"
             Type="System.String" %>

<%@ Property Name="UniqueMethodPrefix"
             Type="System.String" %>

<%@ Property Name="MethodKeySuffix"
             Type="System.String" %>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;

<%
string safeName = EntityNamespace + "." + Entity.ClassName.ToSafeName();
%>

namespace <%= QueryNamespace %>
{
    /// <summary>
    /// Queryable extension methods for <see cref="T:<%= safeName %>"/>.
    /// </summary>
    public static partial class <%= Entity.ClassName.ToSafeName() %>Extensions
    {
<% foreach(var method in Entity.Methods) { %>
<% if (method.IsKey) { %>

        /// <summary>
        /// Gets an instance of <see cref="T:<%= safeName %>"/> by the primary key.
        /// </summary>
        /// <param name="queryable">An <see cref="T:System.Linq.IQueryable`1"></see> to filter.</param>
        /// <returns>An instance of <see cref="T:<%= safeName %>"/> or null if not found.</returns>
        public static <%= safeName %> <%= UniqueMethodPrefix %><%= MethodKeySuffix %>(this System.Linq.IQueryable<<%= safeName %>> queryable, <%= GetParameters(method) %>)
        {
            var dbSet = queryable as DbSet<<%= safeName %>>;
            if (dbSet != null)
                return dbSet.Find(<%= GetParametersNames(method) %>);

            return queryable.FirstOrDefault(<%= GetLamba(method, 4) %>);
        }

        /// <summary>
        /// Gets an instance of <see cref="T:<%= safeName %>"/> by the primary key asynchronously.
        /// </summary>
        /// <param name="queryable">An <see cref="T:System.Linq.IQueryable`1"></see> to filter.</param>
        /// <returns>An instance of <see cref="T:<%= safeName %>"/> or null if not found.</returns>
        public static Task<<%= safeName %>> <%= UniqueMethodPrefix %><%= MethodKeySuffix %>Async(this System.Linq.IQueryable<<%= safeName %>> queryable, <%= GetParameters(method) %>)
        {
            var dbSet = queryable as DbSet<<%= safeName %>>;
            if (dbSet != null)
                return dbSet.FindAsync(<%= GetParametersNames(method) %>);

            return queryable.FirstOrDefaultAsync(<%= GetLamba(method, 4) %>);
        }
<%
} else if (method.IsUnique) {
        string suffix = method.NameSuffix;
        if (suffix == MethodKeySuffix)
            suffix += "Member";
%>

        /// <summary>
        /// Gets an instance of <see cref="T:<%= safeName %>"/> by using a unique index.
        /// </summary>
        /// <param name="queryable">An <see cref="T:System.Linq.IQueryable`1"></see> to filter.</param>
        /// <returns>An instance of <see cref="T:<%= safeName %>"/> or null if not found.</returns>
        public static <%= safeName %> <%= UniqueMethodPrefix %><%= suffix %>(this IQueryable<<%= safeName %>> queryable, <%= GetParameters(method) %>)
        {
            return queryable.FirstOrDefault(<%= GetLamba(method, 4) %>);
        }

        /// <summary>
        /// Gets an instance of <see cref="T:<%= safeName %>"/> by using a unique index asynchronously.
        /// </summary>
        /// <param name="queryable">An <see cref="T:System.Linq.IQueryable`1"></see> to filter.</param>
        /// <returns>An instance of <see cref="T:<%= safeName %>"/> or null if not found.</returns>
        public static Task<<%= safeName %>> <%= UniqueMethodPrefix %><%= suffix %>Async(this IQueryable<<%= safeName %>> queryable, <%= GetParameters(method) %>)
        {
            return queryable.FirstOrDefaultAsync(<%= GetLamba(method, 4) %>);
        }
<% } else {
        string suffix = method.NameSuffix;
        if (suffix == MethodKeySuffix)
            suffix += "Member";
%>

        /// <summary>
        /// Filters a sequence of values based on a predicate.
        /// </summary>
        /// <param name="queryable">An <see cref="T:System.Linq.IQueryable`1"></see> to filter.</param>
        /// <returns>An <see cref="T:System.Linq.IQueryable`1"></see> that contains elements from the input sequence that satisfy the condition specified.</returns>
        public static IQueryable<<%= safeName %>> <%= MethodPrefix %><%= suffix %>(this IQueryable<<%= safeName %>> queryable, <%= GetParameters(method) %>)
        {
            return queryable.Where(<%= GetLamba(method, 4) %>);
        }
<% } // else %>
<% } // foreach method %>
    }
}

<script runat="template">
    public string GetAlias()
    {
        return Entity.ClassName.Substring(0, 1).ToLowerInvariant();
    }

    public string GetLamba(Method method, int tabCount)
    {
        var lamba = new StringBuilder();
        string alias = GetAlias();

        foreach(var property in method.Properties)
        {
            string paramName = property.PropertyName
                .ToCamelCase()
                .ToSafeName();

            if (lamba.Length == 0)
            {
                lamba.AppendFormat("{0} => ", alias);
            }
            else
            {
                lamba.Append("\r\n");
                lamba.Append(' ', tabCount * 4);
                lamba.Append("&& ");
            }

            if (property.IsNullable == true)
                
                lamba.AppendFormat("({0}.{1} == {2} || ({2} == null && {0}.{1} == null))",
                    alias, property.PropertyName, paramName);
            else
                lamba.AppendFormat("{0}.{1} == {2}",
                    alias, property.PropertyName, paramName);
        }

        return lamba.ToString();
    }

    public string GetParameters(Method method)
    {
        StringBuilder args = new StringBuilder();
        foreach(var property in method.Properties)
        {
            if (args.Length > 0)
                args.Append(", ");

            string paramName = property.PropertyName
                .ToCamelCase()
                .ToSafeName();

            string paramType = property.SystemType
                .ToNullableType(property.IsNullable == true);

            args.AppendFormat("{0} {1}",
                paramType,
                paramName);
        }

        return args.ToString();
    }

    public string GetParametersNames(Method method)
    {
        StringBuilder args = new StringBuilder();
        foreach(var property in method.Properties)
        {
            if (args.Length > 0)
                args.Append(", ");

            string paramName = property.PropertyName
                .ToCamelCase()
                .ToSafeName();

            args.Append(paramName);
        }

        return args.ToString();
    }

    public string GetParametersTypes(Method method)
    {
        StringBuilder args = new StringBuilder();
        foreach(var property in method.Properties)
        {
            if (args.Length > 0)
                args.Append(", ");

            string paramType = property.SystemType
                .ToNullableType(property.IsNullable == true);

            args.Append(paramType);
        }

        return args.ToString();
    }

</script>