<%@ Template Language="C#" TargetLanguage="C#" Debug="True" Encoding="UTF-8" %>

<%@ Assembly Src="Model.cs" %>
<%@ Assembly Src="Extensions.cs" %>

<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="System.Linq" %>
<%@ Import Namespace="System.Text" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>

<%@ Import Namespace="SchemaMapper" %>

<%@ Property Name="Entity" Type="SchemaMapper.Entity"  %>
<%@ Property Name="ContextNamespace" Type="System.String"  %>
<%@ Property Name="EntityNamespace" Type="System.String"  %>
<%@ Property Name="MappingNamespace" Type="System.String"  %>
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a CodeSmith Template.
//
//     DO NOT MODIFY contents of this file. Changes to this
//     file will be lost if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;


namespace <%= MappingNamespace %>
{
    public partial class <%= Entity.MappingName.ToSafeName() %>
        : Microsoft.EntityFrameworkCore.IEntityTypeConfiguration<<%= EntityNamespace %>.<%= Entity.ClassName.ToSafeName() %>>
    {
        public void Configure(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder<<%= EntityNamespace %>.<%= Entity.ClassName.ToSafeName() %>> builder)
        {
            // table
<% if (string.IsNullOrEmpty(Entity.TableSchema)) { %>
            builder.ToTable("<%= Entity.TableName %>");
<% } else {  %>
            builder.ToTable("<%= Entity.TableName %>", "<%= Entity.TableSchema %>");
<% }  %>

            // keys
<% if (Entity.Properties.PrimaryKeys.Count() > 0) { %>
            builder.HasKey(t => <%= KeyExpression(Entity.Properties.PrimaryKeys, "t") %>);
<% }  %>

            // Properties
<%
foreach(var p in Entity.Properties)
{
    Response.Write(PropertyExpression(p));
}
%>

            // Relationships
<%
foreach(var r in Entity.Relationships.Where(e => e.IsMapped))
{
        Response.Write(RelationshipExpression(r));
}
%>

            InitializeMapping(builder);
        }
    }
}

<script runat="template">

public string PropertyExpression(Property property)
{
    bool isString = property.SystemType == typeof(string);
    bool isByteArray = property.SystemType == typeof(byte[]);
    bool isDecimal = property.SystemType == typeof(Decimal);
    bool isBlob = string.Equals(property.NativeType, "text", StringComparison.OrdinalIgnoreCase) ||
        string.Equals(property.NativeType, "ntext", StringComparison.OrdinalIgnoreCase) ||
        string.Equals(property.NativeType, "image", StringComparison.OrdinalIgnoreCase);

    StringBuilder sb = new StringBuilder();
    sb.Append(' ', 3 * 4);
    sb.Append("builder.Property(t => t.");
    sb.Append(property.PropertyName);
    sb.Append(")");

    if (property.IsRequired == true)
    {
        sb.AppendLine();
        sb.Append(' ', 4 * 4);
        sb.Append(".IsRequired()");
    }

    if (property.IsRowVersion == true && isByteArray)
    {
      sb.AppendLine();
      sb.Append(' ', 4 * 4);
      sb.Append(".IsRowVersion()");
    }

    sb.AppendLine();
    sb.Append(' ', 4 * 4);
    sb.Append(".HasColumnName(\"");
    sb.Append(property.ColumnName);
    sb.Append("\")");

    if (!string.IsNullOrEmpty(property.NativeType))
    {
        sb.AppendLine();
        sb.Append(' ', 4 * 4);
        sb.Append(".HasColumnType(\"");
        sb.Append(property.NativeType);
        sb.Append("\")");
    }

    if (!isBlob && (isString || isByteArray) && (property.MaxLength > 0 && property.MaxLength < 8000))
    {
      sb.AppendLine();
      sb.Append(' ', 4 * 4);
      sb.Append(".HasMaxLength(");
      sb.Append(property.MaxLength);
      sb.Append(")");
    }

    if (!string.IsNullOrEmpty(property.Default))
    {
        sb.AppendLine();
        sb.Append(' ', 4 * 4);
        sb.Append(".HasDefaultValueSql(\"");
        sb.Append(property.Default);
        sb.Append("\")");
    }

    if (property.IsIdentity == true)
    {
      sb.AppendLine();
      sb.Append(' ', 4 * 4);
      sb.Append(".ValueGeneratedOnAdd()");
    }
    else if (property.IsAutoGenerated == true)
    {
      sb.AppendLine();
      sb.Append(' ', 4 * 4);
      sb.Append(".ValueGeneratedOnAddOrUpdate()");
    }
    else if (property.IsPrimaryKey == true)
    {
      sb.AppendLine();
      sb.Append(' ', 4 * 4);
      sb.Append(".ValueGeneratedNever()");
    }

    sb.AppendLine(";");

    return sb.ToString();
}

public string RelationshipExpression(Relationship relationship)
{
    StringBuilder sb = new StringBuilder();

    sb.Append(' ', 3 * 4);
    sb.Append("builder.HasOne(t => t.");
    sb.Append(relationship.ThisPropertyName);
    sb.Append(")");
    sb.AppendLine();

    sb.Append(' ', 4 * 4);
    if (relationship.OtherCardinality == Cardinality.Many)
    {
        sb.Append(".WithMany(t => t.");
    }
    else
    {
        sb.Append(".WithOne(t => t.");
    }
    sb.Append(relationship.OtherPropertyName);
    sb.Append(")");
    
    sb.AppendLine();
    sb.Append(' ', 4 * 4);
    sb.Append(".HasForeignKey");
    if (relationship.IsOneToOne)
    {
        sb.Append("<");
        sb.Append(EntityNamespace);
        sb.Append(".");
        sb.Append(Entity.ClassName.ToSafeName());
        sb.Append(">");
    }
    sb.Append("(d => ");
    sb.Append(KeyExpression(relationship.ThisProperties, "d"));
    sb.Append(")");

    if (!string.IsNullOrEmpty(relationship.RelationshipName))
    {
        sb.AppendLine();
        sb.Append(' ', 4 * 4);
        sb.Append(".HasConstraintName(\"");
        sb.Append(relationship.RelationshipName);
        sb.Append("\")");
    }

    sb.AppendLine(";");

    return sb.ToString();
}

public string KeyExpression(IEnumerable<Property> keys, string alias = "t")
{
    StringBuilder sb = new StringBuilder();
    if (keys.Count() == 1)
    {
        sb.Append(alias);
        sb.Append(".");
        sb.Append(keys.FirstOrDefault().PropertyName);
    }
    else
    {
        sb.Append("new { ");
        foreach(var p in keys)
        {
            if (sb.Length > 6)
                sb.Append(", ");

            sb.Append(alias);
            sb.Append(".");
            sb.Append(p.PropertyName);
        }
        sb.Append(" }");
    }
    return sb.ToString();
}

public string KeyExpression(IEnumerable<string> keys, string alias = "t")
{
    StringBuilder sb = new StringBuilder();
    if (keys.Count() == 1)
    {
        sb.Append(alias);
        sb.Append(".");
        sb.Append(keys.FirstOrDefault());
    }
    else
    {
        sb.Append("new { ");
        foreach(var p in keys)
        {
            if (sb.Length > 6)
                sb.Append(", ");

            sb.Append(alias);
            sb.Append(".");
            sb.Append(p);
        }
        sb.Append(" }");
    }
    return sb.ToString();
}
</script>