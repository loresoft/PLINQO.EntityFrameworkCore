//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a CodeSmith Template.
//
//     DO NOT MODIFY contents of this file. Changes to this
//     file will be lost if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;


namespace Ugly.Data.Mapping
{
    public partial class SqlTypesMap
        : Microsoft.EntityFrameworkCore.IEntityTypeConfiguration<Ugly.Data.Entities.SqlTypes>
    {
        public void Configure(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder<Ugly.Data.Entities.SqlTypes> builder)
        {
            // table
            builder.ToTable("SqlTypes", "dbo");

            // keys
            builder.HasKey(t => t.Id);

            // Properties
            builder.Property(t => t.Id)
                .IsRequired()
                .HasColumnName("Id")
                .HasColumnType("int")
                .ValueGeneratedOnAdd();
            builder.Property(t => t.BigInt)
                .HasColumnName("BigInt")
                .HasColumnType("bigint");
            builder.Property(t => t.Binary)
                .HasColumnName("Binary")
                .HasColumnType("binary")
                .HasMaxLength(50);
            builder.Property(t => t.Bit)
                .HasColumnName("Bit")
                .HasColumnType("bit");
            builder.Property(t => t.Char)
                .HasColumnName("Char")
                .HasColumnType("char")
                .HasMaxLength(10);
            builder.Property(t => t.DateTime)
                .HasColumnName("DateTime")
                .HasColumnType("datetime");
            builder.Property(t => t.Decimal)
                .HasColumnName("Decimal")
                .HasColumnType("decimal");
            builder.Property(t => t.Float)
                .HasColumnName("Float")
                .HasColumnType("float");
            builder.Property(t => t.Image)
                .HasColumnName("Image")
                .HasColumnType("image");
            builder.Property(t => t.Int)
                .HasColumnName("Int")
                .HasColumnType("int");
            builder.Property(t => t.Money)
                .HasColumnName("Money")
                .HasColumnType("money");
            builder.Property(t => t.NChar)
                .HasColumnName("NChar")
                .HasColumnType("nchar")
                .HasMaxLength(10);
            builder.Property(t => t.NText)
                .HasColumnName("NText")
                .HasColumnType("ntext");
            builder.Property(t => t.Numeric)
                .HasColumnName("Numeric")
                .HasColumnType("numeric");
            builder.Property(t => t.NVarChar)
                .HasColumnName("NVarChar")
                .HasColumnType("nvarchar")
                .HasMaxLength(50);
            builder.Property(t => t.NVarCharMax)
                .HasColumnName("NVarCharMax")
                .HasColumnType("nvarchar");
            builder.Property(t => t.Real)
                .HasColumnName("Real")
                .HasColumnType("real");
            builder.Property(t => t.SmallDateTime)
                .HasColumnName("SmallDateTime")
                .HasColumnType("smalldatetime");
            builder.Property(t => t.SmallInt)
                .HasColumnName("SmallInt")
                .HasColumnType("smallint");
            builder.Property(t => t.SmallMoney)
                .HasColumnName("SmallMoney")
                .HasColumnType("smallmoney");
            builder.Property(t => t.Text)
                .HasColumnName("Text")
                .HasColumnType("text");
            builder.Property(t => t.TimeStamp)
                .IsRowVersion()
                .HasColumnName("TimeStamp")
                .HasColumnType("timestamp")
                .HasMaxLength(8)
                .ValueGeneratedOnAddOrUpdate();
            builder.Property(t => t.TinyInt)
                .HasColumnName("TinyInt")
                .HasColumnType("tinyint");
            builder.Property(t => t.UniqueIdentifier)
                .HasColumnName("UniqueIdentifier")
                .HasColumnType("uniqueidentifier");
            builder.Property(t => t.VarBinary)
                .HasColumnName("VarBinary")
                .HasColumnType("varbinary")
                .HasMaxLength(50);
            builder.Property(t => t.VarBinaryMax)
                .HasColumnName("VarBinaryMax")
                .HasColumnType("varbinary");
            builder.Property(t => t.VarChar)
                .HasColumnName("VarChar")
                .HasColumnType("varchar")
                .HasMaxLength(50);
            builder.Property(t => t.VarCharMax)
                .HasColumnName("VarCharMax")
                .HasColumnType("varchar");
            builder.Property(t => t.Xml)
                .HasColumnName("Xml")
                .HasColumnType("xml");

            // Relationships

            InitializeMapping(builder);
        }

        partial void InitializeMapping(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder<Ugly.Data.Entities.SqlTypes> builder);

    }
}
