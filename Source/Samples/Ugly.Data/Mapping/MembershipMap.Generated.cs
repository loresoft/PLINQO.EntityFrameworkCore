//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a CodeSmith Template.
//
//     DO NOT MODIFY contents of this file. Changes to this
//     file will be lost if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;


namespace Ugly.Data.Mapping
{
    public partial class MembershipMap
        : Microsoft.EntityFrameworkCore.IEntityTypeConfiguration<Ugly.Data.Entities.Membership>
    {
        public void Configure(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder<Ugly.Data.Entities.Membership> builder)
        {
            // table
            builder.ToTable("Membership", "dbo");

            // keys
            builder.HasKey(t => t.UserId);

            // Properties
            builder.Property(t => t.UserId)
                .IsRequired()
                .HasColumnName("UserId")
                .HasColumnType("uniqueidentifier")
                .HasDefaultValueSql("(newid())")
                .ValueGeneratedNever();
            builder.Property(t => t.UserName)
                .IsRequired()
                .HasColumnName("UserName")
                .HasColumnType("nvarchar")
                .HasMaxLength(256);
            builder.Property(t => t.LoweredUserName)
                .IsRequired()
                .HasColumnName("LoweredUserName")
                .HasColumnType("nvarchar")
                .HasMaxLength(256);
            builder.Property(t => t.MobileAlias)
                .HasColumnName("MobileAlias")
                .HasColumnType("nvarchar")
                .HasMaxLength(16)
                .HasDefaultValueSql("(NULL)");
            builder.Property(t => t.Password)
                .IsRequired()
                .HasColumnName("Password")
                .HasColumnType("nvarchar")
                .HasMaxLength(128);
            builder.Property(t => t.PasswordFormat)
                .IsRequired()
                .HasColumnName("PasswordFormat")
                .HasColumnType("int")
                .HasDefaultValueSql("((0))");
            builder.Property(t => t.PasswordSalt)
                .IsRequired()
                .HasColumnName("PasswordSalt")
                .HasColumnType("nvarchar")
                .HasMaxLength(128);
            builder.Property(t => t.MobilePIN)
                .HasColumnName("MobilePIN")
                .HasColumnType("nvarchar")
                .HasMaxLength(16);
            builder.Property(t => t.Email)
                .IsRequired()
                .HasColumnName("Email")
                .HasColumnType("nvarchar")
                .HasMaxLength(256);
            builder.Property(t => t.LoweredEmail)
                .IsRequired()
                .HasColumnName("LoweredEmail")
                .HasColumnType("nvarchar")
                .HasMaxLength(256);
            builder.Property(t => t.PasswordQuestion)
                .HasColumnName("PasswordQuestion")
                .HasColumnType("nvarchar")
                .HasMaxLength(256);
            builder.Property(t => t.PasswordAnswer)
                .HasColumnName("PasswordAnswer")
                .HasColumnType("nvarchar")
                .HasMaxLength(128);
            builder.Property(t => t.IsApproved)
                .IsRequired()
                .HasColumnName("IsApproved")
                .HasColumnType("bit");
            builder.Property(t => t.IsLockedOut)
                .IsRequired()
                .HasColumnName("IsLockedOut")
                .HasColumnType("bit");
            builder.Property(t => t.IsAnonymous)
                .IsRequired()
                .HasColumnName("IsAnonymous")
                .HasColumnType("bit")
                .HasDefaultValueSql("((0))");
            builder.Property(t => t.CreateDate)
                .IsRequired()
                .HasColumnName("CreateDate")
                .HasColumnType("datetime");
            builder.Property(t => t.LastLoginDate)
                .IsRequired()
                .HasColumnName("LastLoginDate")
                .HasColumnType("datetime");
            builder.Property(t => t.LastActivityDate)
                .IsRequired()
                .HasColumnName("LastActivityDate")
                .HasColumnType("datetime");
            builder.Property(t => t.LastPasswordChangedDate)
                .IsRequired()
                .HasColumnName("LastPasswordChangedDate")
                .HasColumnType("datetime");
            builder.Property(t => t.LastLockoutDate)
                .IsRequired()
                .HasColumnName("LastLockoutDate")
                .HasColumnType("datetime");
            builder.Property(t => t.FailedPasswordAttemptCount)
                .IsRequired()
                .HasColumnName("FailedPasswordAttemptCount")
                .HasColumnType("int");
            builder.Property(t => t.FailedPasswordAttemptWindowStart)
                .IsRequired()
                .HasColumnName("FailedPasswordAttemptWindowStart")
                .HasColumnType("datetime");
            builder.Property(t => t.FailedPasswordAnswerAttemptCount)
                .IsRequired()
                .HasColumnName("FailedPasswordAnswerAttemptCount")
                .HasColumnType("int");
            builder.Property(t => t.FailedPasswordAnswerAttemptWindowStart)
                .IsRequired()
                .HasColumnName("FailedPasswordAnswerAttemptWindowStart")
                .HasColumnType("datetime");
            builder.Property(t => t.Comment)
                .HasColumnName("Comment")
                .HasColumnType("ntext");

            // Relationships

            InitializeMapping(builder);
        }

        partial void InitializeMapping(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder<Ugly.Data.Entities.Membership> builder);

    }
}
